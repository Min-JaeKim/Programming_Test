# python

## baek 14503 로봇 청소기 골드5

https://www.acmicpc.net/problem/14503

> python3 72ms

* 문제

  > 로봇 청소기가 주어졌을 때, 청소하는 영역의 개수를 구하는 프로그램을 작성하시오.
  >
  > 로봇 청소기가 있는 장소는 N×M 크기의 직사각형으로 나타낼 수 있으며, 1×1크기의 정사각형 칸으로 나누어져 있다. 각각의 칸은 벽 또는 빈 칸이다. 청소기는 바라보는 방향이 있으며, 이 방향은 동, 서, 남, 북중 하나이다. 지도의 각 칸은 (r, c)로 나타낼 수 있고, r은 북쪽으로부터 떨어진 칸의 개수, c는 서쪽으로 부터 떨어진 칸의 개수이다.
  >
  > 로봇 청소기는 다음과 같이 작동한다.
  >
  > 1. 현재 위치를 청소한다.
  > 2. 현재 위치에서 현재 방향을 기준으로 왼쪽 방향부터 차례대로 인접한 칸을 탐색한다.
  >    1. 왼쪽 방향에 아직 청소하지 않은 공간이 존재한다면, 그 방향으로 회전한 다음 한 칸을 전진하고 1번부터 진행한다.
  >    2. 왼쪽 방향에 청소할 공간이 없다면, 그 방향으로 회전하고 2번으로 돌아간다.
  >    3. 네 방향 모두 청소가 이미 되어있거나 벽인 경우에는, 바라보는 방향을 유지한 채로 한 칸 후진을 하고 2번으로 돌아간다.
  >    4. 네 방향 모두 청소가 이미 되어있거나 벽이면서, 뒤쪽 방향이 벽이라 후진도 할 수 없는 경우에는 작동을 멈춘다.
  >
  > 로봇 청소기는 이미 청소되어있는 칸을 또 청소하지 않으며, 벽을 통과할 수 없다.

* 입력

  > 첫째 줄에 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 50)
  >
  > 둘째 줄에 로봇 청소기가 있는 칸의 좌표 (r, c)와 바라보는 방향 d가 주어진다. d가 0인 경우에는 북쪽을, 1인 경우에는 동쪽을, 2인 경우에는 남쪽을, 3인 경우에는 서쪽을 바라보고 있는 것이다.
  >
  > 셋째 줄부터 N개의 줄에 장소의 상태가 북쪽부터 남쪽 순서대로, 각 줄은 서쪽부터 동쪽 순서대로 주어진다. 빈 칸은 0, 벽은 1로 주어진다. 지도의 첫 행, 마지막 행, 첫 열, 마지막 열에 있는 모든 칸은 벽이다.
  >
  > 로봇 청소기가 있는 칸의 상태는 항상 빈 칸이다.
  >
  > ```bash
  > 11 10
  > 7 4 0
  > 1 1 1 1 1 1 1 1 1 1
  > 1 0 0 0 0 0 0 0 0 1
  > 1 0 0 0 1 1 1 1 0 1
  > 1 0 0 1 1 0 0 0 0 1
  > 1 0 1 1 0 0 0 0 0 1
  > 1 0 0 0 0 0 0 0 0 1
  > 1 0 0 0 0 0 0 1 0 1
  > 1 0 0 0 0 0 1 1 0 1
  > 1 0 0 0 0 0 1 1 0 1
  > 1 0 0 0 0 0 0 0 0 1
  > 1 1 1 1 1 1 1 1 1 1
  > ```
  >
  
* 출력

  > 로봇 청소기가 청소하는 칸의 개수를 출력한다.
  >
  > ```bash
  > 3
  > ```



- 

```python
import sys
input = sys.stdin.readline


dr = [-1, 0, 1, 0]
dc = [0, 1, 0, -1]


def sol():
    n, m = map(int, input().split())
    r, c, d = map(int, input().split())
    arr = [list(map(int, input().split())) for _ in range(n)]
    v = [[0] * m for _ in range(n)]
    res = 0

    while True:
        if not arr[r][c] and not v[r][c]:
            v[r][c] = 1
            res += 1
        else:
            nd = d
            for _ in range(4):
                nd = (nd-1) % 4
                nr, nc = r + dr[nd], c + dc[nd]
                if 0 <= nr < n and 0 <= nc < m and not arr[nr][nc] and not v[nr][nc]:
                    r, c, d = nr, nc, nd
                    break
            else:
                if not arr[r + dr[d-2]][c + dc[d-2]]:
                    r, c = r + dr[d-2], c + dc[d-2]
                else:
                    break

    print(res)




sol()
```

> 하,,, 뭔 이문제를 이렇게 오래 푸냐 ㅋㅋㅋ 진짜 별 거 아닌 구현 문젠데 말이야.
>
> 문제 이해를 하는데 오래걸렸다.. 문제에서 자꾸 그방향으로 회전하라길래 그방향이 뭔지 잘 몰랐는데 단순히 왼쪽 방향으로 회전하라는 얘기인듯,, 왼쪽에 없으면 또 왼쪽 왼쪽,, 



* 모범답안

  ```python
  56
  
  x = lambda:map(int, input().split())
  N,M  = x()
  a,b,c = x()
  m = []
  d = [-1,0,1,0,-1,0,1,0]
  cnt = 0
  for _ in range(N):
      m.append(list(x()))
  ck = 0
  while m[a][b]!=1:
      if m[a][b]==0:
          cnt+=1
      m[a][b]=-1
      ck=1
      for i in range(1,5):
          x = a + d[c-i]
          y = b + d[3-c+i]
          if m[x][y]==0:
              a = x
              b = y
              c = (c-i)%4
              ck= 0
              break
      if ck:
          a+=d[c+2]
          b+=d[c+3]
  print(cnt)
  ```

  > 몰라,, 애초에 그렇게 차이나지도 않는다!!

